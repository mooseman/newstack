

   **  NUSP protocol design  **  

Below is a conceptual design for a new universal protocol—let's call it NUSP (New Universal Secure Protocol)—intended to run atop the “foundation” described earlier. It aims to be secure, elegant, flexible, and simple enough to be adapted to a variety of applications (data transfers, email, web browsing, messaging, etc.).

Key Goals:

    Security by Default:
    Every connection uses strong encryption, authentication, and forward secrecy. No unencrypted variant exists.

    Session-Oriented with Easy Multiplexing:
    Endpoints establish sessions (like QUIC or TLS) that can carry multiple streams or messages of arbitrary types, all within a single cryptographic context. No need for separate protocols for each application—just different content types and negotiation at the start.

    Flexible for Any Application Data:
    Support both message-based (datagram) and stream-based semantics, negotiated at session start. Applications can label their data with content type identifiers.

    Minimal, Extensible Packet Structure:
    Use a small number of packet types with well-defined fields. All data after certain headers is encrypted. Support variable-length fields for flexibility and forward compatibility.

    Cryptographic Identities (SCIDs):
    Endpoints identified by Self-Certifying IDs. Authentication and trust are tied directly to these cryptographic identities.

High-Level Protocol Structure

Phases:

    Session Establishment (Handshake):
    The client initiates a handshake with the server’s SCID. Both sides negotiate a session key, cipher suites, and desired features (streaming mode, datagram mode, content types, compression, etc.). Once complete, a secure session is established.

    Data Exchange:
    After the handshake, all data packets are encrypted. Each packet can contain one or more frames (like QUIC). Frames can carry:
        Application data (with a content type field)
        Keep-alive pings
        Congestion control or flow control signaling
        Error and termination signals

    Session Teardown:
    Either side can gracefully close the session by sending a termination signal. Both sides then discard keys and state.

Packet Types and Design

NUSP uses two main categories of packets:

    Handshake Packets: Used during session establishment.
    Encrypted Data Packets: Used after the session key is established.

General Packet Layout:

+---------------------------------+
| Public Header (cleartext)       |
+---------------------------------+
| Encrypted Body (ciphertext)     |
+---------------------------------+

Public Header Fields (Cleartext):

    Version (1 byte): Protocol version number, e.g., 0x01.
    Packet Type (1 byte):
        0x01: Handshake Initiation
        0x02: Handshake Response
        0x03: Handshake Completion
        0x10: Encrypted Data Packet
    Source SCID (variable length, up to 32 bytes): Optional in initial packets. For handshake initiation, the sender SCID may be included in full. For established sessions, could be replaced by a shorter Session ID.
    Destination SCID or Session ID (variable length, up to 32 bytes): Identifies the intended recipient or the established session. Initially, it’s the server SCID. After handshake, a shorter Session ID is negotiated.
    Length (variable length integer): Length of the entire packet (including header and encrypted body).

Encrypted Body Fields (for handshake or data):
All fields below are protected (encrypted and integrity-checked) once keys are available. For the initial handshake initiation, not all fields are encrypted. The handshake initiation packet’s body might be partially cleartext to include ephemeral keys.

A. Handshake Packets:

Handshake Initiation (Client -> Server, Packet Type = 0x01):

    Ephemeral Public Key (32 bytes): Client’s ephemeral key for key exchange.
    Supported Cipher Suites (variable): List of cipher suite IDs.
    Proposed Session Parameters (variable): Application mode (streaming or datagram), desired features, etc.
    Random Nonce (16-32 bytes): For key derivation and anti-replay.

This packet is mostly cleartext except fields that can be pre-encrypted with server’s known public key (if known) or sent as is if no prior knowledge.

Handshake Response (Server -> Client, Packet Type = 0x02):

    Server Ephemeral Public Key (32 bytes)
    Chosen Cipher Suite (1-2 bytes)
    Chosen Session Parameters (variable)
    Server Authentication Proof (Signature): The server signs something like a transcript hash to prove SCID ownership.

This packet can be partially encrypted if client included a public key. If not, it’s mostly cleartext with a server signature to verify identity.

Handshake Completion (Client -> Server, Packet Type = 0x03):

    Client Confirmation Data (HMAC or Signature)
    Derived Session ID (16 bytes): A shorter ID for ongoing communication.
    Any final parameters confirmation

After this, both sides have derived symmetric keys. The session is established, and subsequent packets are Encrypted Data packets.

B. Encrypted Data Packets (Packet Type = 0x10):
Once a session is established, all subsequent packets are of this type. They share a unified format:

+---------------------------------+
| Public Header (encrypted_data)  |
|  Version, Packet Type = 0x10    |
|  Session ID                     |
|  Length                         |
+---------------------------------+
| Encrypted Body                  |
|   Sequence Number (var-int)     |
|   [Frames ... ]                 |
+---------------------------------+

Encrypted Body Frames:

Within the encrypted payload, we have a series of frames. Each frame begins with a Frame Type byte and a length field. Examples:

    Frame Type 0x01: Application Data Frame
        Content-Type (var-int): An integer identifying the application data type (e.g., 1 = HTTP-like request, 2 = email message, 3 = file chunk)
        Data Length (var-int)
        Data (bytes)

    Frame Type 0x02: Control Frame (e.g., ACK, flow control)
        Control Code (1 byte)
        Optional Fields depending on control code

    Frame Type 0x03: Keep-Alive/Ping Frame
        No extra fields, just a signal to keep the session alive.

    Frame Type 0x04: Close/Termination Frame
        Reason Code (1 byte)
        Optional message string

A single Encrypted Data Packet can contain multiple frames back-to-back.

Encryption & Integrity:

    The entire Body (after the public header) is encrypted with AEAD ciphers (e.g., AES-GCM or ChaCha20-Poly1305).
    The Packet Type, Session ID, and Length fields are not encrypted but authenticated. The Session ID ensures correct association of packets with sessions.
    Sequence numbers are included inside the encrypted portion to prevent replays and reorder attacks.
    Keys are derived from the handshake ephemeral keys and SCIDs.

Session Behavior

    Initialization:
        Client forms a Handshake Init packet (0x01) with its ephemeral key and parameters.
        Server replies with Handshake Response (0x02), providing its ephemeral key and authentication.
        Client sends Handshake Completion (0x03) with confirmation and final parameters.
        Both sides derive a shared secret key.

    Data Exchange:
        Both sides send Data Packets (0x10) containing frames.
        Applications can define their own content types for data frames. For example:
            1: Generic Binary Data
            2: HTTP Request/Response-like messages
            3: Email MIME Block
            4: File Transfer Chunk
        Flow control and reliability are handled by the presence of ACK or control frames.
        Clients can negotiate streaming (TCP-like semantics) or datagram (UDP-like semantics) or both (like QUIC streams). The frame type and session parameters define how the data should be handled.

    Termination:
        A Close frame signals the end of the session. Keys are discarded, and the session ends.

Flexibility & Extensibility

    Versioning:
    The first byte is a version field. Future versions of NUSP can add new frame types or new handshake methods without breaking older implementations. Clients and servers negotiate the highest mutually supported version.

    Content Types & Negotiation: Content types are just integers. The handshake can include a registry or a negotiation step so the peers agree on supported data formats. If a new application comes along, it just picks a new content type ID.

    Optional Features: Features like compression, multi-path support, FEC (Forward Error Correction), or priority can be negotiated in the handshake. They can be indicated by custom frames or additional handshake parameters.

    Security Updates: If a cipher suite becomes obsolete, the handshake can negotiate a newer suite. Session tickets (like in TLS) can allow quick re-establishment with updated keys.

Putting It All Together

NUSP provides:

    A unified, secure handshake that authenticates endpoints (via SCIDs) and negotiates keys.
    A simple packet structure: a small public header plus fully encrypted payload.
    A flexible framing system inside encrypted data packets to carry arbitrary application data, control signals, and session management instructions.
    A versioned protocol with negotiable parameters for future-proofing.

This approach yields a single, elegant, secure, and flexible protocol that can adapt to many application needs while providing a consistent, secure foundation.



